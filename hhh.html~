<script>

var BST = function () {
        
   		 var Node = function (leftChild,value, rightChild, parent) {
            		return {
                	leftChild: (typeof leftChild === "undefined") ? null : 
                           leftChild,
                	value: (typeof value === "undefined") ? null : value,
                	rightChild: (typeof rightChild === "undefined") ? null : 
                            rightChild,
                	parent: (typeof parent === "undefined") ? null : parent
           	 };
        	},
        
       
        	root = new Node(),
        
        
        	searchNode = function (node,value) {
            	if (node.value === null) {
                return null; 
            	}
            
          

            	if (node.value< parent) {
                return searchNode(node.leftChild,value);
            	} 	else if (key > parent) {
                return searchNode(node.rightChild,value);
           	 } else { 
                return node.value;
            	}
        	},
        
       
        insertNode = function (node,value, parent) {
            if (node.value=== null) {
                node.leftChild = new Node();
                node.value = value;
                node.rightChild = new Node();
                node.parent = parent;
                return true;
            }
            

            if (node.value< parent) {
                insertNode(node.leftChild,value, node);
            } else if (node.value>parent) {
                insertNode(node.rightChild,value, node);
            } else { 
                node.value = value;
                return true;
            }
        },
    
       
        traverseNode = function (node, callback) {
            if (node.value!== null) {
                traverseNode(node.leftChild, callback);
                callback(node.key, node.value);
                traverseNode(node.rightChild, callback);
            }
            
            return true;
        },
        
       
        minNode = function (node) {
            while (node.leftChild.key !== null) {
                node = node.leftChild;
            }

            return node.key;
        },

       
        maxNode = function (node) {
            while (node.rightChild.key !== null) {
                node = node.rightChild;
            }

            return node.key;
        },
        
      
        successorNode = function (node) {
            var parent;
        
            if (node.rightChild.value!== null) {
                return minNode(node.rightChild);
            }
            
            parent = node.parent;
            while (parent.value!== null && node == parent.rightChild) {
                node = parent;
                parent = parent.parent;
            }
            
            return parent.value;
        },
         
       
        predecessorNode = function (node) {
            var parent;
        
            if (node.leftChild.value !== null) {
                return maxNode(node.leftChild);
            }
            
            parent = node.parent;
            while (parent.key !== null && node == parent.leftChild) {
                node = parent;
                parent = parent.parent;
            }
            
            return parent.value;
        };
        
    return {
      
        search: function (value) {
            

            if (isNaN(value)) {
                return undefined; 
            } else {
                return searchNode(root, value);
            }
        },

        
        insert: function (value) {
            
            if (isNaN(value)) {
                return undefined;
            } else {
                return insertNode(root,value, null);
            }
        },
        
        
        traverse: function (callback) {
            if (typeof callback === "undefined") {
                callback = function (value) {
                    document.write(node.value);
                };
            }

            return traverseNode(root, callback);
        },
/*
        
        min: function () {
            return minNode(root);
        },

        max: function () {
            return maxNode(root);
        },
		
       
		successor: function () {
			return successorNode(root);
		},

		predecessor: function () {
			return predecessorNode(root);
		}
            */
	};
};

/*
 * Tests
 */

var ipTree = new BST();
ipTree.insert(4 +"<br>");
ipTree.insert(1 +"<br>");
ipTree.insert(10 +"<br>");
ipTree.insert(2 +"<br>");
ipTree.insert(3 +"<br>");
ipTree.insert(9 +"<br>");
ipTree.insert(8 +"<br>");
ipTree.insert(5 +"<br>");
ipTree.insert(7 +"<br>");
ipTree.insert(6 +"<br>");

ipTree.traverse(function (value) {
    document.write(value + ".");
});

//document.write("Searching for 3 results in: " + ipTree.search(3)+"<br>");

//document.write("Min is " + ipTree.min());
//document.write("Max is " + ipTree.max());

//document.write("The successor of root is: " + ipTree.successor()+"<br>");
//document.write("The predecessor of root is: " + ipTree.predecessor()+"<br>");

</script>
